/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */

import {
  Account,
  Context,
  Pda,
  PublicKey,
  RpcAccount,
  RpcGetAccountOptions,
  RpcGetAccountsOptions,
  assertAccountExists,
  deserializeAccount,
  gpaBuilder,
  publicKey as toPublicKey,
} from '@metaplex-foundation/umi';
import {
  Serializer,
  array,
  mapSerializer,
  publicKey as publicKeySerializer,
  struct,
  u64,
  u8,
} from '@metaplex-foundation/umi/serializers';

export type Config = Account<ConfigAccountData>;

export type ConfigAccountData = {
  discriminator: Array<number>;
  admin: PublicKey;
  rewardMint: PublicKey;
  rewardToken: PublicKey;
  rewardsPerDay: bigint;
};

export type ConfigAccountDataArgs = {
  admin: PublicKey;
  rewardMint: PublicKey;
  rewardToken: PublicKey;
  rewardsPerDay: number | bigint;
};

export function getConfigAccountDataSerializer(): Serializer<
  ConfigAccountDataArgs,
  ConfigAccountData
> {
  return mapSerializer<ConfigAccountDataArgs, any, ConfigAccountData>(
    struct<ConfigAccountData>(
      [
        ['discriminator', array(u8(), { size: 8 })],
        ['admin', publicKeySerializer()],
        ['rewardMint', publicKeySerializer()],
        ['rewardToken', publicKeySerializer()],
        ['rewardsPerDay', u64()],
      ],
      { description: 'ConfigAccountData' }
    ),
    (value) => ({
      ...value,
      discriminator: [155, 12, 170, 224, 30, 250, 204, 130],
    })
  ) as Serializer<ConfigAccountDataArgs, ConfigAccountData>;
}

export function deserializeConfig(rawAccount: RpcAccount): Config {
  return deserializeAccount(rawAccount, getConfigAccountDataSerializer());
}

export async function fetchConfig(
  context: Pick<Context, 'rpc'>,
  publicKey: PublicKey | Pda,
  options?: RpcGetAccountOptions
): Promise<Config> {
  const maybeAccount = await context.rpc.getAccount(
    toPublicKey(publicKey, false),
    options
  );
  assertAccountExists(maybeAccount, 'Config');
  return deserializeConfig(maybeAccount);
}

export async function safeFetchConfig(
  context: Pick<Context, 'rpc'>,
  publicKey: PublicKey | Pda,
  options?: RpcGetAccountOptions
): Promise<Config | null> {
  const maybeAccount = await context.rpc.getAccount(
    toPublicKey(publicKey, false),
    options
  );
  return maybeAccount.exists ? deserializeConfig(maybeAccount) : null;
}

export async function fetchAllConfig(
  context: Pick<Context, 'rpc'>,
  publicKeys: Array<PublicKey | Pda>,
  options?: RpcGetAccountsOptions
): Promise<Config[]> {
  const maybeAccounts = await context.rpc.getAccounts(
    publicKeys.map((key) => toPublicKey(key, false)),
    options
  );
  return maybeAccounts.map((maybeAccount) => {
    assertAccountExists(maybeAccount, 'Config');
    return deserializeConfig(maybeAccount);
  });
}

export async function safeFetchAllConfig(
  context: Pick<Context, 'rpc'>,
  publicKeys: Array<PublicKey | Pda>,
  options?: RpcGetAccountsOptions
): Promise<Config[]> {
  const maybeAccounts = await context.rpc.getAccounts(
    publicKeys.map((key) => toPublicKey(key, false)),
    options
  );
  return maybeAccounts
    .filter((maybeAccount) => maybeAccount.exists)
    .map((maybeAccount) => deserializeConfig(maybeAccount as RpcAccount));
}

export function getConfigGpaBuilder(
  context: Pick<Context, 'rpc' | 'programs'>
) {
  const programId = context.programs.getPublicKey(
    'nftStaking',
    '58LCGWxNcN1dsbDaWpR4YMNxVdSA8mx7pC8z59k6nfCA'
  );
  return gpaBuilder(context, programId)
    .registerFields<{
      discriminator: Array<number>;
      admin: PublicKey;
      rewardMint: PublicKey;
      rewardToken: PublicKey;
      rewardsPerDay: number | bigint;
    }>({
      discriminator: [0, array(u8(), { size: 8 })],
      admin: [8, publicKeySerializer()],
      rewardMint: [40, publicKeySerializer()],
      rewardToken: [72, publicKeySerializer()],
      rewardsPerDay: [104, u64()],
    })
    .deserializeUsing<Config>((account) => deserializeConfig(account))
    .whereField('discriminator', [155, 12, 170, 224, 30, 250, 204, 130]);
}

export function getConfigSize(): number {
  return 112;
}
