/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */

import {
  Context,
  Pda,
  PublicKey,
  Signer,
  TransactionBuilder,
  publicKey,
  transactionBuilder,
} from '@metaplex-foundation/umi';
import {
  Serializer,
  array,
  mapSerializer,
  struct,
  u8,
} from '@metaplex-foundation/umi/serializers';
import {
  ResolvedAccount,
  ResolvedAccountsWithIndices,
  getAccountMetasAndSigners,
} from '../shared';

// Accounts.
export type StakeInstructionAccounts = {
  user: Signer;
  nftStake: Signer;
  nftMint: PublicKey | Pda;
  userNftToken: PublicKey | Pda;
  userNftTokenRecord: PublicKey | Pda;
  delegate: PublicKey | Pda;
  lockedAddress: PublicKey | Pda;
  edition: PublicKey | Pda;
  metadata: PublicKey | Pda;
  authRules: PublicKey | Pda;
  authRulesProgram?: PublicKey | Pda;
  tokenMetadataProgram?: PublicKey | Pda;
  sysvarInstructions?: PublicKey | Pda;
  tokenProgram?: PublicKey | Pda;
  systemProgram?: PublicKey | Pda;
};

// Data.
export type StakeInstructionData = {
  discriminator: Array<number>;
  delegateBump: number;
};

export type StakeInstructionDataArgs = { delegateBump: number };

export function getStakeInstructionDataSerializer(): Serializer<
  StakeInstructionDataArgs,
  StakeInstructionData
> {
  return mapSerializer<StakeInstructionDataArgs, any, StakeInstructionData>(
    struct<StakeInstructionData>(
      [
        ['discriminator', array(u8(), { size: 8 })],
        ['delegateBump', u8()],
      ],
      { description: 'StakeInstructionData' }
    ),
    (value) => ({
      ...value,
      discriminator: [206, 176, 202, 18, 200, 209, 179, 108],
    })
  ) as Serializer<StakeInstructionDataArgs, StakeInstructionData>;
}

// Args.
export type StakeInstructionArgs = StakeInstructionDataArgs;

// Instruction.
export function stake(
  context: Pick<Context, 'programs'>,
  input: StakeInstructionAccounts & StakeInstructionArgs
): TransactionBuilder {
  // Program ID.
  const programId = context.programs.getPublicKey(
    'nftStaking',
    '58LCGWxNcN1dsbDaWpR4YMNxVdSA8mx7pC8z59k6nfCA'
  );

  // Accounts.
  const resolvedAccounts = {
    user: { index: 0, isWritable: true as boolean, value: input.user ?? null },
    nftStake: {
      index: 1,
      isWritable: true as boolean,
      value: input.nftStake ?? null,
    },
    nftMint: {
      index: 2,
      isWritable: false as boolean,
      value: input.nftMint ?? null,
    },
    userNftToken: {
      index: 3,
      isWritable: true as boolean,
      value: input.userNftToken ?? null,
    },
    userNftTokenRecord: {
      index: 4,
      isWritable: true as boolean,
      value: input.userNftTokenRecord ?? null,
    },
    delegate: {
      index: 5,
      isWritable: true as boolean,
      value: input.delegate ?? null,
    },
    lockedAddress: {
      index: 6,
      isWritable: true as boolean,
      value: input.lockedAddress ?? null,
    },
    edition: {
      index: 7,
      isWritable: true as boolean,
      value: input.edition ?? null,
    },
    metadata: {
      index: 8,
      isWritable: true as boolean,
      value: input.metadata ?? null,
    },
    authRules: {
      index: 9,
      isWritable: true as boolean,
      value: input.authRules ?? null,
    },
    authRulesProgram: {
      index: 10,
      isWritable: false as boolean,
      value: input.authRulesProgram ?? null,
    },
    tokenMetadataProgram: {
      index: 11,
      isWritable: false as boolean,
      value: input.tokenMetadataProgram ?? null,
    },
    sysvarInstructions: {
      index: 12,
      isWritable: false as boolean,
      value: input.sysvarInstructions ?? null,
    },
    tokenProgram: {
      index: 13,
      isWritable: false as boolean,
      value: input.tokenProgram ?? null,
    },
    systemProgram: {
      index: 14,
      isWritable: false as boolean,
      value: input.systemProgram ?? null,
    },
  } satisfies ResolvedAccountsWithIndices;

  // Arguments.
  const resolvedArgs: StakeInstructionArgs = { ...input };

  // Default values.
  if (!resolvedAccounts.authRulesProgram.value) {
    resolvedAccounts.authRulesProgram.value = context.programs.getPublicKey(
      'mplTokenAuthRules',
      'auth9SigNpDKz4sJJ1DfCTuZrZNSAgh9sFD3rboVmgg'
    );
    resolvedAccounts.authRulesProgram.isWritable = false;
  }
  if (!resolvedAccounts.tokenMetadataProgram.value) {
    resolvedAccounts.tokenMetadataProgram.value = context.programs.getPublicKey(
      'mplTokenMetadata',
      'metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s'
    );
    resolvedAccounts.tokenMetadataProgram.isWritable = false;
  }
  if (!resolvedAccounts.sysvarInstructions.value) {
    resolvedAccounts.sysvarInstructions.value = publicKey(
      'Sysvar1nstructions1111111111111111111111111'
    );
  }
  if (!resolvedAccounts.tokenProgram.value) {
    resolvedAccounts.tokenProgram.value = context.programs.getPublicKey(
      'splToken',
      'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA'
    );
    resolvedAccounts.tokenProgram.isWritable = false;
  }
  if (!resolvedAccounts.systemProgram.value) {
    resolvedAccounts.systemProgram.value = context.programs.getPublicKey(
      'splSystem',
      '11111111111111111111111111111111'
    );
    resolvedAccounts.systemProgram.isWritable = false;
  }

  // Accounts in order.
  const orderedAccounts: ResolvedAccount[] = Object.values(
    resolvedAccounts
  ).sort((a, b) => a.index - b.index);

  // Keys and Signers.
  const [keys, signers] = getAccountMetasAndSigners(
    orderedAccounts,
    'programId',
    programId
  );

  // Data.
  const data = getStakeInstructionDataSerializer().serialize(
    resolvedArgs as StakeInstructionDataArgs
  );

  // Bytes Created On Chain.
  const bytesCreatedOnChain = 0;

  return transactionBuilder([
    { instruction: { keys, programId, data }, signers, bytesCreatedOnChain },
  ]);
}
